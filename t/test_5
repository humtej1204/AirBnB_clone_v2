#!/usr/bin/python3
from models.engine.file_storage import FileStorage

fs = FileStorage()

from models.engine.file_storage import FileStorage

try:
    print(type(FileStorage._FileStorage__file_path))
except:
    fs = FileStorage()
    print(type(fs._FileStorage__file_path))

from models.engine.file_storage import FileStorage

try:
    print(type(FileStorage._FileStorage__objects))
except:
    fs = FileStorage()
    print(type(fs._FileStorage__objects))

from models.engine.file_storage import FileStorage

fs = FileStorage()
print(type(fs.all))
print(type(fs.all()))

from models.engine.file_storage import FileStorage

fs = FileStorage()
print(type(fs.new))


import os
from models.engine.file_storage import FileStorage

fs = FileStorage()
print(type(fs.save))
file_path = "file.json"
try:
    file_path = FileStorage._FileStorage__file_path
except:
    pass

try:    
    os.remove(file_path)
except:
    pass

fs.save()

print(os.path.exists(file_path))

try:
    os.remove(file_path)
except Exception as e:
    pass



import os
from datetime import datetime
from models.engine.file_storage import FileStorage
from models.base_model import BaseModel

fs = FileStorage()
print(type(fs.reload))
file_path = "file.json"
try:
    file_path = FileStorage._FileStorage__file_path
except:
    pass
try:
    os.remove(file_path)
except:
    pass
try:
    fs._FileStorage__objects.clear()
except:
    pass

ids = []
for i in range(10):
    bm = BaseModel()
    bm.updated_at = datetime.utcnow()
    fs.new(bm)
    ids.append(bm.id)

try:
    os.remove(file_path)
except:
    pass
fs.save()

try:
    fs._FileStorage__objects.clear()
except:
    pass
fs.reload()

all_reloaded = fs.all()

if len(all_reloaded.keys()) != len(ids):
    print("Missing after reload")

for id in ids:
    if all_reloaded.get(id) is None and all_reloaded.get("{}.{}".format("BaseModel", id)) is None:
        print("Missing {}".format(id))

try:
    os.remove(file_path)
except Exception as e:
    pass


import os
from datetime import datetime
from models.engine.file_storage import FileStorage
from models.base_model import BaseModel

fs = FileStorage()
file_path = "file.json"
try:
    file_path = FileStorage._FileStorage__file_path
except:
    pass
try:
    os.remove(file_path)
except:
    pass
try:
    fs._FileStorage__objects.clear()
except:
    pass
ids = []

# First create
for i in range(1):
    bm = BaseModel()
    bm.updated_at = datetime.utcnow()
    fs.new(bm)
    ids.append(bm.id)

try:
    os.remove(file_path)
except:
    pass
fs.save()
try:
    fs._FileStorage__objects.clear()
except:
    pass
fs.reload()

all_reloaded = fs.all()

if len(all_reloaded.keys()) != len(ids):
    print("Missing after reload 1")

for id in ids:
    if all_reloaded.get(id) is None and all_reloaded.get("{}.{}".format("BaseModel", id)) is None:
        print("Missing 1 {}".format(id))

from models import storage
storage.reload()

# Second create
for i in range(2):
    bm = BaseModel()
    bm.save()
    ids.append(bm.id)
try:
    os.remove(file_path)
except:
    pass
storage.save()
try:
    fs._FileStorage__objects.clear()
except:
    pass
storage.reload()

all_reloaded = storage.all()

if len(all_reloaded.keys()) != len(ids):
    print("Missing after reload 2")

for id in ids:
    if all_reloaded.get(id) is None and all_reloaded.get("{}.{}".format("BaseModel", id)) is None:
        print("Missing 2 {}".format(id))

try:
    os.remove(file_path)
except Exception as e:
    pass



import os
from models.engine.file_storage import FileStorage
from models.base_model import BaseModel

fs = FileStorage()
file_path = "file.json"
try:
    file_path = FileStorage._FileStorage__file_path
except:
    pass
try:
    os.remove(file_path)
except:
    pass
try:
    fs._FileStorage__objects.clear()
except:
    pass
ids = []
objs_by_id = {}
for i in range(10):
    bm = BaseModel()
    fs.new(bm)
    bm.save()
    ids.append(bm.id)
    objs_by_id[bm.id] = bm

try:
    fs._FileStorage__objects.clear()
except:
    pass
fs.reload()

all_reloaded = fs.all()

if len(all_reloaded.keys()) != len(ids):
    print("Missing after reload")

for id in ids:
    if all_reloaded.get(id) is None and all_reloaded.get("{}.{}".format("BaseModel", id)) is None:
        print("Missing {}".format(id))

for id in ids:
    obj_reloaded = all_reloaded.get(id)
    if obj_reloaded is None:
        obj_reloaded = all_reloaded.get("{}.{}".format("BaseModel", id))
    print(obj_reloaded.__class__.__name__)
    obj_created = objs_by_id[id]
    print(obj_reloaded.id == obj_created.id)
    print(obj_reloaded.created_at == obj_created.created_at)
    print(obj_reloaded.updated_at == obj_created.updated_at)

try:
    os.remove(file_path)
except Exception as e:
    pass


import os
from models.base_model import BaseModel

bm_init = BaseModel()
bm_init.save()

try:
    bm = BaseModel(**bm_init.to_dict())
except:
    bm = None

if bm is None or bm.id != bm_init.id:
    try:
        bm = BaseModel(bm_init.to_dict())
    except:
        bm = None

print(bm.id == bm_init.id)
print(type(bm.created_at))
try:
    print(type(bm.updated_at))
except:
    print("<class 'datetime.datetime'>")

print(bm.created_at.year == bm_init.created_at.year)
print(bm.created_at.month == bm_init.created_at.month)
print(bm.created_at.day == bm_init.created_at.day)
print(bm.created_at.hour == bm_init.created_at.hour)
print(bm.created_at.minute == bm_init.created_at.minute)

try:
    print(bm.updated_at.year == bm_init.updated_at.year)
    print(bm.updated_at.month == bm_init.updated_at.month)
    print(bm.updated_at.day == bm_init.updated_at.day)
    print(bm.updated_at.hour == bm_init.updated_at.hour)
    print(bm.updated_at.minute == bm_init.updated_at.minute)
except:
    print("True")
    print("True")
    print("True")
    print("True")
    print("True")


"""Doc
"""
from models.engine.tmp_file_storage import *
from models.engine.tmp_file_storage import FileStorage


class FileStorage(FileStorage):
    """Doc
    """

    __file_path = None


import os
from models.engine.file_storage import FileStorage

file_path = "file.json"
try:
    file_path = FileStorage._FileStorage__file_path
except:
    pass
try:
    os.remove(file_path)
except Exception as e:
    pass

from models.base_model import BaseModel
from models import storage

try:
    storage._FileStorage__objects.clear()
except:
    pass
ids = []

for i in range(10):
    bm = BaseModel()
    bm.save()
    ids.append(bm.id)
try:
    storage._FileStorage__objects.clear()
except:
    pass
storage.reload()

all_reloaded = storage.all()

if len(all_reloaded.keys()) != len(ids):
    print("Missing after reload")

for id in ids:
    if all_reloaded.get(id) is None and all_reloaded.get("{}.{}".format("BaseModel", id)) is None:
        print("Missing {}".format(id))

try:
    os.remove(file_path)
except Exception as e:
    pass


"""Doc
"""
from models.engine.tmp_file_storage import *
from models.engine.tmp_file_storage import FileStorage


class FileStorage(FileStorage):
    """Doc
    """

    __objects = []


"""Doc
"""
from models.engine.tmp_file_storage import *
from models.engine.tmp_file_storage import FileStorage


class FileStorage(FileStorage):
    """Doc
    """

    def all(self):
        """ DOC
        """
        return {}

"""Doc
"""
from models.engine.tmp_file_storage import *
from models.engine.tmp_file_storage import FileStorage


class FileStorage(FileStorage):
    """Doc
    """

    def new(self, obj):
        """ DOC
        """
        pass


"""Doc
"""
from models.engine.tmp_file_storage import *
from models.engine.tmp_file_storage import FileStorage


class FileStorage(FileStorage):
    """Doc
    """

    def save(self, obj=None):
        """ DOC
        """
        pass


"""Doc
"""
from models.engine.tmp_file_storage import *
from models.engine.tmp_file_storage import FileStorage


class FileStorage(FileStorage):
    """Doc
    """

    def reload(self):
        """DOC
        """
        pass


"""Doc
"""
from models.tmp_base_model import *
from models.tmp_base_model import BaseModel


class BaseModel(BaseModel):
    """Doc
    """

    def __init__(self, *args, **kwargs):
        """Doc
        """
        if args is not None and len(args) > 0:
            pass
        else:
            BaseModel.__init__(self, args, kwargs)


"""Doc
"""
from models.tmp_base_model import *
from models.tmp_base_model import BaseModel


class BaseModel(BaseModel):
    """Doc
    """

    def save(self):
        self.updated_at = datetime.utcnow()

